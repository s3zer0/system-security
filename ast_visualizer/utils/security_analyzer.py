"""
Î≥¥Ïïà Î∂ÑÏÑù Î™®Îìà - AST Î∂ÑÏÑù Í≤∞Í≥ºÎ•º LLMÏúºÎ°ú Ìï¥ÏÑù
"""

import os
import json
from typing import List, Dict, Any
from anthropic import Anthropic
from dotenv import load_dotenv

class SecurityAnalyzer:
    """AST Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î≥¥Ïïà Í¥ÄÏ†êÏóêÏÑú Ìï¥ÏÑùÌïòÎäî ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, api_key: str = None):
        """
        Ï¥àÍ∏∞Ìôî
        
        Args:
            api_key: Anthropic API ÌÇ§ (ÏóÜÏúºÎ©¥ ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú ÏùΩÏùå)
        """
        load_dotenv()
        
        self.api_key = api_key or os.getenv("ANTHROPIC_API_KEY")
        if not self.api_key:
            raise ValueError("ANTHROPIC_API_KEY not found in environment")
        
        self.client = Anthropic(api_key=self.api_key)
    
    def analyze_security_posture(
        self, 
        external_apis: List[str], 
        internal_apis: List[str],
        unused_apis: List[str],
        vulnerability_data: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """
        AST Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î≥¥Ïïà Í¥ÄÏ†êÏóêÏÑú Ï¢ÖÌï© ÌèâÍ∞Ä
        
        Args:
            external_apis: Ïô∏Î∂Ä ÎÖ∏Ï∂úÎêú API Î™©Î°ù
            internal_apis: ÎÇ¥Î∂Ä Ï†ÑÏö© API Î™©Î°ù
            unused_apis: ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÎäî API Î™©Î°ù
            vulnerability_data: Trivy Ï∑®ÏïΩÏ†ê Îç∞Ïù¥ÌÑ∞ (ÏÑ†ÌÉù)
            
        Returns:
            Î≥¥Ïïà Î∂ÑÏÑù Í≤∞Í≥º ÎîïÏÖîÎÑàÎ¶¨
        """
        # Ï∑®ÏïΩÏ†ê Îç∞Ïù¥ÌÑ∞ ÏöîÏïΩ
        vuln_summary = self._summarize_vulnerabilities(vulnerability_data) if vulnerability_data else "Ï∑®ÏïΩÏ†ê Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå"
        
        # ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
        prompt = f"""ÎãπÏã†ÏùÄ ÏÇ¨Ïù¥Î≤Ñ Î≥¥Ïïà Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Îã§Ïùå Python Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùò ÏΩîÎìú Î∂ÑÏÑù Í≤∞Í≥ºÎ•º ÌèâÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî.

## üìä Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞

### Ïô∏Î∂Ä ÎÖ∏Ï∂ú API (Í≥µÍ≤© ÌëúÎ©¥)
Ï¥ù {len(external_apis)}Í∞úÏùò APIÍ∞Ä Ïô∏Î∂ÄÏóê ÎÖ∏Ï∂úÎêòÏñ¥ ÏûàÏäµÎãàÎã§:
{self._format_api_list(external_apis, limit=20)}

### ÎÇ¥Î∂Ä Ï†ÑÏö© API
Ï¥ù {len(internal_apis)}Í∞úÏùò ÎÇ¥Î∂Ä API:
{self._format_api_list(internal_apis, limit=15)}

### ÎØ∏ÏÇ¨Ïö© API (Îç∞Îìú ÏΩîÎìú)
Ï¥ù {len(unused_apis)}Í∞úÏùò ÎØ∏ÏÇ¨Ïö© API:
{self._format_api_list(unused_apis, limit=10)}

### Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†ê
{vuln_summary}

## üìã Î∂ÑÏÑù ÏöîÏ≤≠

Îã§Ïùå ÌòïÏãùÏùò JSONÏúºÎ°ú Î≥¥Ïïà Î∂ÑÏÑùÏùÑ Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî:

{{
  "critical_findings": [
    {{
      "title": "ÏúÑÌóò ÏöîÏÜå Ï†úÎ™©",
      "severity": "CRITICAL|HIGH|MEDIUM|LOW",
      "description": "ÏÉÅÏÑ∏ ÏÑ§Î™Ö",
      "affected_apis": ["api1", "api2"],
      "attack_scenario": "Íµ¨Ï≤¥Ï†ÅÏù∏ Í≥µÍ≤© ÏãúÎÇòÎ¶¨Ïò§",
      "immediate_action": "Ï¶âÏãú Ï∑®Ìï¥Ïïº Ìï† Ï°∞Ïπò"
    }}
  ],
  "attack_surface_analysis": {{
    "total_external_apis": Ïà´Ïûê,
    "vulnerable_external_apis": ["Ï∑®ÏïΩÌïú Ïô∏Î∂Ä API"],
    "unnecessary_exposure": ["Î∂àÌïÑÏöîÌïòÍ≤å ÎÖ∏Ï∂úÎêú API"],
    "recommendations": ["Í∂åÏû•ÏÇ¨Ìï≠"]
  }},
  "code_quality": {{
    "dead_code_impact": "ÏòÅÌñ•ÎèÑ ÏÑ§Î™Ö",
    "cleanup_priority": ["Ïö∞ÏÑ†ÏàúÏúÑÎ≥Ñ Ï†ïÎ¶¨ ÎåÄÏÉÅ"],
    "maintenance_recommendations": ["Ïú†ÏßÄÎ≥¥Ïàò Í∂åÏû•ÏÇ¨Ìï≠"]
  }},
  "security_architecture": {{
    "current_issues": ["ÌòÑÏû¨ ÏïÑÌÇ§ÌÖçÏ≤ò Î¨∏Ï†úÏ†ê"],
    "improvement_suggestions": ["Í∞úÏÑ† Ï†úÏïà"],
    "defense_in_depth": ["Îã§Ï∏µ Î∞©Ïñ¥ Ï†ÑÎûµ"]
  }},
  "action_items": [
    {{
      "priority": 1-5,
      "task": "ÏûëÏóÖ ÎÇ¥Ïö©",
      "estimated_time": "ÏòàÏÉÅ ÏÜåÏöî ÏãúÍ∞Ñ",
      "risk_if_not_done": "ÎØ∏Ïã§Ìñâ Ïãú ÏúÑÌóòÎèÑ"
    }}
  ],
  "overall_risk_score": 0-100,
  "summary": "Ï†ÑÏ≤¥ ÏöîÏïΩ (3-5 Î¨∏Ïû•)"
}}

**Ï§ëÏöî**: Î∞òÎìúÏãú Ïú†Ìö®Ìïú JSONÎßå Î∞òÌôòÌïòÍ≥†, ÏΩîÎìú Î∏îÎ°ù(```)Ïù¥ÎÇò Îã§Î•∏ ÌÖçÏä§Ìä∏Î•º Ìè¨Ìï®ÌïòÏßÄ ÎßàÏÑ∏Ïöî."""

        try:
            # Claude API Ìò∏Ï∂ú
            response = self.client.messages.create(
                model="claude-sonnet-4-5-20250929",
                max_tokens=8000,
                temperature=0.3,
                system="ÎãπÏã†ÏùÄ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î≥¥Ïïà ÏïÑÌÇ§ÌÖçÏ≤ò Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Ìï≠ÏÉÅ Ïú†Ìö®Ìïú JSON ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµÌïòÏÑ∏Ïöî.",
                messages=[{"role": "user", "content": prompt}]
            )
            
            # ÏùëÎãµ ÌååÏã±
            content = response.content[0].text.strip()
            
            # JSON ÏΩîÎìú Î∏îÎ°ù Ï†úÍ±∞
            if "```json" in content:
                start = content.find("```json") + 7
                end = content.find("```", start)
                content = content[start:end].strip()
            elif "```" in content:
                start = content.find("```") + 3
                end = content.find("```", start)
                content = content[start:end].strip()
            
            # JSON ÌååÏã±
            analysis = json.loads(content)
            
            # Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
            analysis["metadata"] = {
                "total_external_apis": len(external_apis),
                "total_internal_apis": len(internal_apis),
                "total_unused_apis": len(unused_apis),
                "analysis_timestamp": self._get_timestamp()
            }
            
            return analysis
            
        except json.JSONDecodeError as e:
            print(f"[!] JSON ÌååÏã± Ïò§Î•ò: {e}")
            print(f"[!] ÏõêÎ≥∏ ÏùëÎãµ: {content[:500]}...")
            return self._fallback_analysis(external_apis, internal_apis, unused_apis)
        
        except Exception as e:
            print(f"[!] LLM Î∂ÑÏÑù Ïò§Î•ò: {e}")
            return self._fallback_analysis(external_apis, internal_apis, unused_apis)
    
    def _format_api_list(self, apis: List[str], limit: int = 10) -> str:
        """API Î™©Î°ùÏùÑ Î≥¥Í∏∞ Ï¢ãÍ≤å Ìè¨Îß∑"""
        if not apis:
            return "ÏóÜÏùå"
        
        displayed = apis[:limit]
        formatted = "\n".join([f"  - {api}" for api in displayed])
        
        if len(apis) > limit:
            formatted += f"\n  ... Ïô∏ {len(apis) - limit}Í∞ú"
        
        return formatted
    
    def _summarize_vulnerabilities(self, vuln_data: Dict[str, Any]) -> str:
        """Ï∑®ÏïΩÏ†ê Îç∞Ïù¥ÌÑ∞Î•º ÏöîÏïΩ"""
        if not vuln_data or "vulnerabilities" not in vuln_data:
            return "Ï∑®ÏïΩÏ†ê Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå"
        
        vulns = vuln_data["vulnerabilities"]
        summary_lines = []
        
        # Ïã¨Í∞ÅÎèÑÎ≥Ñ ÌÜµÍ≥Ñ
        severity_counts = {}
        for vuln in vulns:
            sev = vuln.get("severity", "UNKNOWN")
            severity_counts[sev] = severity_counts.get(sev, 0) + 1
        
        summary_lines.append(f"Ï¥ù {len(vulns)}Í∞ú Ï∑®ÏïΩÏ†ê:")
        for sev, count in sorted(severity_counts.items()):
            summary_lines.append(f"  - {sev}: {count}Í∞ú")
        
        # Ï£ºÏöî CVE ÎÇòÏó¥ (ÏµúÎåÄ 5Í∞ú)
        if vulns:
            summary_lines.append("\nÏ£ºÏöî CVE:")
            for vuln in vulns[:5]:
                cve_id = vuln.get("id", "Unknown")
                pkg = vuln.get("package_name", "Unknown")
                sev = vuln.get("severity", "Unknown")
                summary_lines.append(f"  - {cve_id} ({pkg}, {sev})")
        
        return "\n".join(summary_lines)
    
    def _fallback_analysis(
        self, 
        external_apis: List[str], 
        internal_apis: List[str],
        unused_apis: List[str]
    ) -> Dict[str, Any]:
        """LLM Ïã§Ìå® Ïãú Í∏∞Î≥∏ Î∂ÑÏÑù Ï†úÍ≥µ"""
        return {
            "critical_findings": [
                {
                    "title": "ÏûêÎèô Î∂ÑÏÑù Ïã§Ìå®",
                    "severity": "MEDIUM",
                    "description": "LLM Î∂ÑÏÑùÏù¥ Ïã§Ìå®ÌïòÏó¨ Í∏∞Î≥∏ Î∂ÑÏÑùÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.",
                    "affected_apis": [],
                    "attack_scenario": "N/A",
                    "immediate_action": "LLM API ÌÇ§ Î∞è Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî."
                }
            ],
            "attack_surface_analysis": {
                "total_external_apis": len(external_apis),
                "vulnerable_external_apis": [],
                "unnecessary_exposure": [],
                "recommendations": [
                    "Ïô∏Î∂Ä ÎÖ∏Ï∂ú API ÏµúÏÜåÌôî",
                    "ÏûÖÎ†• Í≤ÄÏ¶ù Í∞ïÌôî",
                    "Ïù∏Ï¶ù/Ïù∏Í∞Ä Î©îÏª§ÎãàÏ¶ò ÌôïÏù∏"
                ]
            },
            "code_quality": {
                "dead_code_impact": f"{len(unused_apis)}Í∞úÏùò ÎØ∏ÏÇ¨Ïö© APIÍ∞Ä Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.",
                "cleanup_priority": unused_apis[:5],
                "maintenance_recommendations": [
                    "ÎØ∏ÏÇ¨Ïö© ÏΩîÎìú Ï†úÍ±∞",
                    "ÏΩîÎìú Î¶¨Î∑∞ ÌîÑÎ°úÏÑ∏Ïä§ Í∞ïÌôî"
                ]
            },
            "security_architecture": {
                "current_issues": ["ÏûêÎèô Î∂ÑÏÑù Î∂àÍ∞Ä"],
                "improvement_suggestions": ["ÏàòÎèô Î≥¥Ïïà Í≤ÄÌÜ† Í∂åÏû•"],
                "defense_in_depth": ["Îã§Ï∏µ Î∞©Ïñ¥ Ï†ÑÎûµ Íµ¨ÌòÑ"]
            },
            "action_items": [
                {
                    "priority": 1,
                    "task": "LLM Î≥¥Ïïà Î∂ÑÏÑù Í∏∞Îä• Î≥µÍµ¨",
                    "estimated_time": "30Î∂Ñ",
                    "risk_if_not_done": "ÏÉÅÏÑ∏ Î≥¥Ïïà Î∂ÑÏÑù Î∂àÍ∞Ä"
                }
            ],
            "overall_risk_score": 50,
            "summary": f"Í∏∞Î≥∏ Î∂ÑÏÑù Í≤∞Í≥º: Ïô∏Î∂Ä API {len(external_apis)}Í∞ú, ÎÇ¥Î∂Ä API {len(internal_apis)}Í∞ú, ÎØ∏ÏÇ¨Ïö© API {len(unused_apis)}Í∞ú Î∞úÍ≤¨. ÏÉÅÏÑ∏ Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ LLM Ïó∞Í≤∞ÏùÑ Î≥µÍµ¨ÌïòÏÑ∏Ïöî.",
            "metadata": {
                "total_external_apis": len(external_apis),
                "total_internal_apis": len(internal_apis),
                "total_unused_apis": len(unused_apis),
                "analysis_timestamp": self._get_timestamp(),
                "fallback_mode": True
            }
        }
    
    def _get_timestamp(self) -> str:
        """ÌòÑÏû¨ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Î∞òÌôò"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    def generate_report(self, analysis: Dict[str, Any], output_file: str = None) -> str:
        """
        Î∂ÑÏÑù Í≤∞Í≥ºÎ•º ÏùΩÍ∏∞ Ïâ¨Ïö¥ Î¶¨Ìè¨Ìä∏Î°ú Î≥ÄÌôò
        
        Args:
            analysis: analyze_security_postureÏùò Í≤∞Í≥º
            output_file: Ï†ÄÏû•Ìï† ÌååÏùº Í≤ΩÎ°ú (ÏÑ†ÌÉù)
            
        Returns:
            Ìè¨Îß∑Îêú Î¶¨Ìè¨Ìä∏ Î¨∏ÏûêÏó¥
        """
        lines = []
        
        # Ìó§Îçî
        lines.append("=" * 80)
        lines.append("üîê Î≥¥Ïïà Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏")
        lines.append("=" * 80)
        lines.append("")
        
        # Ï†ÑÏ≤¥ ÏöîÏïΩ
        lines.append("## üìã Ï†ÑÏ≤¥ ÏöîÏïΩ")
        lines.append(analysis.get("summary", "ÏöîÏïΩ ÏóÜÏùå"))
        lines.append(f"\n**Ï†ÑÏ≤¥ ÏúÑÌóò Ï†êÏàò**: {analysis.get('overall_risk_score', 'N/A')}/100")
        lines.append("")
        
        # Í∏¥Í∏â Ï°∞Ïπò ÏÇ¨Ìï≠
        critical_findings = analysis.get("critical_findings", [])
        if critical_findings:
            lines.append("## üö® Í∏¥Í∏â Ï°∞Ïπò ÌïÑÏöî")
            lines.append("-" * 80)
            for i, finding in enumerate(critical_findings, 1):
                lines.append(f"\n### {i}. {finding.get('title', 'Unknown')} [{finding.get('severity', 'UNKNOWN')}]")
                lines.append(f"**ÏÑ§Î™Ö**: {finding.get('description', 'N/A')}")
                lines.append(f"**Í≥µÍ≤© ÏãúÎÇòÎ¶¨Ïò§**: {finding.get('attack_scenario', 'N/A')}")
                lines.append(f"**Ï¶âÏãú Ï°∞Ïπò**: {finding.get('immediate_action', 'N/A')}")
                
                affected = finding.get('affected_apis', [])
                if affected:
                    lines.append(f"**ÏòÅÌñ•Î∞õÎäî API**: {', '.join(affected[:5])}")
            lines.append("")
        
        # Í≥µÍ≤© ÌëúÎ©¥ Î∂ÑÏÑù
        attack_surface = analysis.get("attack_surface_analysis", {})
        if attack_surface:
            lines.append("## üéØ Í≥µÍ≤© ÌëúÎ©¥ Î∂ÑÏÑù")
            lines.append("-" * 80)
            lines.append(f"Ï¥ù Ïô∏Î∂Ä ÎÖ∏Ï∂ú API: {attack_surface.get('total_external_apis', 0)}Í∞ú")
            
            vuln_apis = attack_surface.get('vulnerable_external_apis', [])
            if vuln_apis:
                lines.append(f"\n**Ï∑®ÏïΩÌïú Ïô∏Î∂Ä API** ({len(vuln_apis)}Í∞ú):")
                for api in vuln_apis[:10]:
                    lines.append(f"  - {api}")
            
            unnecessary = attack_surface.get('unnecessary_exposure', [])
            if unnecessary:
                lines.append(f"\n**Î∂àÌïÑÏöîÌïú ÎÖ∏Ï∂ú** ({len(unnecessary)}Í∞ú):")
                for api in unnecessary[:10]:
                    lines.append(f"  - {api}")
            
            recommendations = attack_surface.get('recommendations', [])
            if recommendations:
                lines.append("\n**Í∂åÏû•ÏÇ¨Ìï≠**:")
                for rec in recommendations:
                    lines.append(f"  - {rec}")
            lines.append("")
        
        # ÏΩîÎìú ÌíàÏßà
        code_quality = analysis.get("code_quality", {})
        if code_quality:
            lines.append("## üßπ ÏΩîÎìú ÌíàÏßà")
            lines.append("-" * 80)
            lines.append(f"**ÏòÅÌñ•ÎèÑ**: {code_quality.get('dead_code_impact', 'N/A')}")
            
            cleanup = code_quality.get('cleanup_priority', [])
            if cleanup:
                lines.append(f"\n**Ï†ïÎ¶¨ Ïö∞ÏÑ†ÏàúÏúÑ** (ÏÉÅÏúÑ {len(cleanup)}Í∞ú):")
                for api in cleanup:
                    lines.append(f"  - {api}")
            lines.append("")
        
        # Ïï°ÏÖò ÏïÑÏù¥ÌÖú
        action_items = analysis.get("action_items", [])
        if action_items:
            lines.append("## ‚úÖ Ïï°ÏÖò ÏïÑÏù¥ÌÖú")
            lines.append("-" * 80)
            for item in sorted(action_items, key=lambda x: x.get('priority', 99)):
                priority = item.get('priority', 'N/A')
                task = item.get('task', 'N/A')
                time = item.get('estimated_time', 'N/A')
                risk = item.get('risk_if_not_done', 'N/A')
                
                lines.append(f"\n**[Ïö∞ÏÑ†ÏàúÏúÑ {priority}]** {task}")
                lines.append(f"  - ÏòàÏÉÅ ÏãúÍ∞Ñ: {time}")
                lines.append(f"  - ÎØ∏Ïã§Ìñâ Ïãú ÏúÑÌóò: {risk}")
            lines.append("")
        
        # Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
        metadata = analysis.get("metadata", {})
        if metadata:
            lines.append("## ‚ÑπÔ∏è Î∂ÑÏÑù Ï†ïÎ≥¥")
            lines.append("-" * 80)
            lines.append(f"Î∂ÑÏÑù ÏãúÍ∞Å: {metadata.get('analysis_timestamp', 'N/A')}")
            lines.append(f"Ïô∏Î∂Ä API: {metadata.get('total_external_apis', 0)}Í∞ú")
            lines.append(f"ÎÇ¥Î∂Ä API: {metadata.get('total_internal_apis', 0)}Í∞ú")
            lines.append(f"ÎØ∏ÏÇ¨Ïö© API: {metadata.get('total_unused_apis', 0)}Í∞ú")
            if metadata.get('fallback_mode'):
                lines.append("\n‚ö†Ô∏è Ìè¥Î∞± Î™®ÎìúÎ°ú Î∂ÑÏÑùÎê® (LLM Ïó∞Í≤∞ Ïã§Ìå®)")
        
        lines.append("\n" + "=" * 80)
        
        # Î¶¨Ìè¨Ìä∏ Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
        report = "\n".join(lines)
        
        # ÌååÏùº Ï†ÄÏû•
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(report)
            print(f"[+] Î≥¥Ïïà Î¶¨Ìè¨Ìä∏ Ï†ÄÏû•: {output_file}")
        
        return report