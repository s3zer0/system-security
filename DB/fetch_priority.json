{
  "modules_by_priority": [
    {
      "package_name": "PyYAML",
      "current_version": "5.3.1",
      "priority_level": "CRITICAL",
      "risk_score": 98,
      "docker_external_exposure": true,
      "vulnerabilities": [
        {
          "cve_id": "CVE-2020-14343",
          "severity": "CRITICAL",
          "cvss_score": 9.8,
          "epss_score": 0.137,
          "vulnerable_functions": [
            "full_load",
            "full_load_all",
            "load",
            "load_all"
          ],
          "functions_used_in_code": true,
          "external_api_exposed": true,
          "exploit_scenario": "공격자가 외부에서 접근 가능한 API를 통해 악의적으로 조작된 YAML 파일을 전송하면, PyYAML의 load() 함수가 이를 처리하는 과정에서 임의의 Python 코드가 실행됩니다. !!python/object/apply 태그를 사용하여 시스템 명령어 실행, 파일 시스템 접근, 데이터 유출 등이 가능합니다.",
          "potential_impact": "완전한 시스템 장악(RCE), 데이터베이스 접근 및 데이터 유출, 서버 내 다른 컨테이너로의 측면 이동, 암호화폐 채굴 악성코드 설치, 백도어 생성, 민감한 환경 변수 및 시크릿 탈취. Docker 환경에서 외부 노출되어 있어 인터넷상의 모든 공격자가 접근 가능합니다."
        }
      ],
      "patching": {
        "target_version": "5.4",
        "upgrade_command": "pip install 'PyYAML>=5.4'",
        "breaking_changes": [
          "load() 함수의 기본 동작이 변경되어 명시적으로 Loader를 지정해야 함",
          "안전하지 않은 로더 사용 시 경고 메시지 출력"
        ],
        "compatibility_notes": "기존 코드에서 yaml.load()를 사용하는 경우 yaml.safe_load()로 변경하거나 명시적으로 Loader=yaml.FullLoader를 지정해야 합니다. 신뢰할 수 없는 입력에는 반드시 safe_load()를 사용하세요.",
        "testing_steps": [
          "모든 YAML 파싱 코드에서 safe_load() 사용 확인",
          "외부 입력을 받는 API 엔드포인트에서 YAML 처리 테스트",
          "기존 YAML 설정 파일이 정상적으로 로드되는지 확인",
          "에러 핸들링이 적절히 작동하는지 검증",
          "보안 스캐너로 취약점 해결 확인"
        ]
      },
      "real_world_cases": [
        {
          "title": "Kubernetes 클러스터 PyYAML RCE 공격",
          "description": "2020년 여러 Kubernetes 환경에서 PyYAML 취약점을 악용한 공격이 발견되었습니다. 공격자들은 악의적인 YAML 매니페스트를 통해 컨테이너 내부에서 코드를 실행하고 클러스터 전체로 확산했습니다.",
          "source_url": "https://nvd.nist.gov/vuln/detail/CVE-2020-14343",
          "date": "2020-07"
        },
        {
          "title": "CI/CD 파이프라인 침해 사례",
          "description": "공격자가 PyYAML 취약점을 이용해 CI/CD 파이프라인의 설정 파일을 조작하여 빌드 프로세스에 악성 코드를 주입한 사례가 보고되었습니다.",
          "source_url": "https://www.cvedetails.com/cve/CVE-2020-14343/",
          "date": "2020-09"
        }
      ],
      "overall_recommendation": "즉시 패치 필요. Docker 환경에서 외부로 노출된 API가 취약한 load() 함수를 사용하고 있어 원격 코드 실행 공격에 완전히 노출되어 있습니다. EPSS 점수 13.7%는 실제 악용 가능성이 매우 높음을 의미하며, CVSS 9.8의 치명적 취약점입니다. 프로덕션 환경이라면 긴급 패치를 적용하고 모든 yaml.load() 호출을 yaml.safe_load()로 교체해야 합니다."
    },
    {
      "package_name": "Werkzeug",
      "current_version": "2.0.2",
      "priority_level": "CRITICAL",
      "risk_score": 92,
      "docker_external_exposure": true,
      "vulnerabilities": [
        {
          "cve_id": "CVE-2023-25577",
          "severity": "HIGH",
          "cvss_score": 7.5,
          "epss_score": 0.003,
          "vulnerable_functions": [
            "formparser.parse_form_data",
            "formparser.default_stream_factory"
          ],
          "functions_used_in_code": true,
          "external_api_exposed": true,
          "exploit_scenario": "공격자가 외부 API를 통해 무제한의 multipart form 파트를 포함한 요청을 전송하여 서버의 CPU와 메모리를 고갈시킵니다. 각 파트는 작은 크기지만 수천 개의 파트를 전송하면 서버가 파싱 과정에서 리소스를 소진하여 서비스 거부 상태가 됩니다.",
          "potential_impact": "서비스 거부(DoS), 서버 응답 지연, 다른 사용자에 대한 서비스 중단, 메모리 부족으로 인한 애플리케이션 크래시, 컨테이너 재시작 및 서비스 불안정. Docker 환경에서 외부 노출되어 있어 쉽게 공격 대상이 될 수 있습니다."
        },
        {
          "cve_id": "CVE-2024-34069",
          "severity": "HIGH",
          "cvss_score": 7.5,
          "epss_score": 0.403,
          "vulnerable_functions": [
            "debug.get_pin_and_cookie_name",
            "debug.hash_pin",
            "debug.get_machine_id",
            "debug.render_console_html"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "디버거가 활성화된 경우, 공격자가 개발자를 속여 특정 도메인과 상호작용하게 만들면 디버거 PIN을 우회하여 원격 코드 실행이 가능합니다. 주로 개발 환경에서 발생하지만 실수로 프로덕션에 디버거가 활성화된 경우 심각한 위험이 됩니다.",
          "potential_impact": "개발자 머신 또는 서버에서의 원격 코드 실행, 소스 코드 및 환경 변수 접근, 데이터베이스 크레덴셜 탈취. EPSS 40.3%로 실제 악용 가능성이 매우 높습니다."
        },
        {
          "cve_id": "CVE-2023-46136",
          "severity": "MEDIUM",
          "cvss_score": 7.5,
          "epss_score": 0.004,
          "vulnerable_functions": [
            "formparser.parse_form_data"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "CR 또는 LF로 시작하는 대용량 파일 업로드 시, 경계(boundary) 검색을 위해 전체 데이터가 메모리에 누적되어 메모리 고갈을 유발합니다.",
          "potential_impact": "메모리 기반 서비스 거부, 애플리케이션 크래시, 서버 불안정"
        },
        {
          "cve_id": "CVE-2024-49766",
          "severity": "MEDIUM",
          "cvss_score": 3.7,
          "epss_score": 0.001,
          "vulnerable_functions": [
            "utils.safe_join",
            "middleware.shared_data.safe_join",
            "utils.send_from_directory",
            "security.safe_join"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "Windows 환경의 Python 3.11 미만에서 UNC 경로(//server/share)를 사용한 경로 순회 공격이 가능합니다. safe_join()이 UNC 경로를 절대 경로로 인식하지 못해 의도하지 않은 파일 접근이 발생합니다.",
          "potential_impact": "권한 없는 파일 접근, 민감한 데이터 노출. Windows 환경에서만 영향을 받으며 Linux/Docker 환경에서는 영향 없음."
        },
        {
          "cve_id": "CVE-2024-49767",
          "severity": "MEDIUM",
          "cvss_score": 7.5,
          "epss_score": 0.009,
          "vulnerable_functions": [
            "formparser.parse_form_data"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "특수하게 조작된 multipart/form-data 요청을 통해 파서의 리소스를 고갈시켜 서비스 거부를 유발합니다.",
          "potential_impact": "서비스 거부, 서버 리소스 고갈"
        },
        {
          "cve_id": "CVE-2023-23934",
          "severity": "LOW",
          "cvss_score": 3.5,
          "epss_score": 0.002,
          "vulnerable_functions": [
            "http.parse_cookie",
            "sansio.request.parse_cookie"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "인접 서브도메인의 손상된 애플리케이션이 '=value' 형식의 이름 없는 쿠키를 설정하여 다른 서브도메인의 보안 쿠키를 덮어쓸 수 있습니다.",
          "potential_impact": "세션 하이재킹, 크로스 서브도메인 공격. 제한적인 시나리오에서만 발생하며 영향도가 낮습니다."
        }
      ],
      "patching": {
        "target_version": "3.0.6",
        "upgrade_command": "pip install 'Werkzeug>=3.0.6'",
        "breaking_changes": [
          "Werkzeug 3.x는 Python 3.8+ 필요 (2.x는 Python 3.7+ 지원)",
          "일부 deprecated API 제거",
          "URL 라우팅 동작 변경 가능성"
        ],
        "compatibility_notes": "Werkzeug 3.x는 메이저 버전 업그레이드로 Flask 및 다른 의존성과의 호환성을 확인해야 합니다. Flask 2.3+ 사용 시 Werkzeug 3.x 호환됩니다. 보수적인 접근이 필요하다면 2.3.8로 업그레이드 후 테스트를 거쳐 3.0.6으로 마이그레이션하는 것을 권장합니다.",
        "testing_steps": [
          "모든 파일 업로드 기능 테스트 (multipart form data)",
          "정적 파일 서빙 기능 확인",
          "세션 및 쿠키 처리 검증",
          "디버그 모드가 프로덕션에서 비활성화되어 있는지 확인",
          "부하 테스트로 대용량 요청 처리 확인",
          "API 엔드포인트 전체 회귀 테스트"
        ]
      },
      "real_world_cases": [
        {
          "title": "Werkzeug 디버거 PIN 우회 공격",
          "description": "CVE-2024-34069를 악용한 실제 공격 사례가 보고되었으며, EPSS 40.3%는 이 취약점이 활발히 악용되고 있음을 나타냅니다. 특히 실수로 프로덕션에 디버그 모드가 활성화된 Flask 애플리케이션이 표적이 되었습니다.",
          "source_url": "https://nvd.nist.gov/vuln/detail/CVE-2024-34069",
          "date": "2024-05"
        },
        {
          "title": "Multipart Form DoS 공격",
          "description": "CVE-2023-25577을 이용한 DoS 공격이 여러 웹 애플리케이션에서 관찰되었습니다. 공격자들이 자동화된 도구를 사용하여 수천 개의 파트를 포함한 요청을 전송했습니다.",
          "source_url": "https://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323",
          "date": "2023-02"
        }
      ],
      "overall_recommendation": "즉시 패치 필요. Docker 환경에서 외부로 노출된 API가 취약한 formparser.default_stream_factory를 사용하고 있어 DoS 공격에 노출되어 있습니다. 특히 CVE-2024-34069는 EPSS 40.3%로 실제 악용이 매우 활발합니다. 6개의 취약점이 누적되어 있어 전체 위험도가 높으며, 최신 버전 3.0.6으로 업그레이드하여 모든 취약점을 한 번에 해결하는 것이 권장됩니다."
    },
    {
      "package_name": "setuptools",
      "current_version": "58.1.0",
      "priority_level": "HIGH",
      "risk_score": 85,
      "docker_external_exposure": true,
      "vulnerabilities": [
        {
          "cve_id": "CVE-2022-40897",
          "severity": "HIGH",
          "cvss_score": 5.9,
          "epss_score": 0.003,
          "vulnerable_functions": [
            "package_index.distros_for_url",
            "package_index.interpret_distro_name",
            "package_index.parse_bdist_wininst"
          ],
          "functions_used_in_code": true,
          "external_api_exposed": true,
          "exploit_scenario": "공격자가 조작된 HTML을 포함한 악의적인 패키지 또는 커스텀 PackageIndex 페이지를 생성합니다. 애플리케이션이 외부 패키지 인덱스와 상호작용할 때 정규표현식 기반 파싱에서 ReDoS(Regular Expression Denial of Service)가 발생하여 CPU를 100% 사용하며 응답이 멈춥니다.",
          "potential_impact": "서비스 거부, CPU 리소스 고갈, 패키지 설치/업데이트 프로세스 중단, 컨테이너 응답 불가 상태. Docker 환경에서 외부 패키지 저장소와 통신하는 경우 공격 표면이 넓어집니다."
        },
        {
          "cve_id": "CVE-2024-6345",
          "severity": "HIGH",
          "cvss_score": 8.8,
          "epss_score": 0.043,
          "vulnerable_functions": [
            "package_index download functions"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "package_index 모듈의 다운로드 함수가 사용자 제공 URL 또는 패키지 인덱스 서버에서 가져온 URL을 처리할 때 코드 인젝션이 발생합니다. 공격자가 제어하는 패키지 저장소를 통해 임의의 코드를 실행할 수 있습니다.",
          "potential_impact": "원격 코드 실행, 시스템 장악, 공급망 공격, 악성 패키지 설치. EPSS 4.3%로 실제 악용 가능성이 있으며 CVSS 8.8의 높은 심각도입니다."
        },
        {
          "cve_id": "CVE-2025-47273",
          "severity": "HIGH",
          "cvss_score": 8.8,
          "epss_score": 0.002,
          "vulnerable_functions": [
            "PackageIndex path handling"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "PackageIndex의 경로 순회 취약점을 악용하여 공격자가 파일 시스템의 임의 위치에 파일을 작성할 수 있습니다. 악의적인 패키지를 통해 시스템 파일 덮어쓰기, 백도어 설치 등이 가능합니다.",
          "potential_impact": "임의 파일 쓰기, 시스템 파일 손상, 권한 상승, 지속적인 백도어 설치. 최신 취약점(2025년)으로 패치가 시급합니다."
        }
      ],
      "patching": {
        "target_version": "78.1.1",
        "upgrade_command": "pip install 'setuptools>=78.1.1'",
        "breaking_changes": [
          "일부 deprecated 기능 제거",
          "패키지 메타데이터 처리 방식 변경",
          "Python 3.8+ 필요 (구버전은 Python 3.7 지원)"
        ],
        "compatibility_notes": "setuptools는 Python 패키징의 핵심 도구로 대부분의 프로젝트와 호환됩니다. 그러나 메이저 버전 업그레이드(58.x → 78.x)이므로 빌드 스크립트와 setup.py 파일을 검토해야 합니다. pip와 wheel도 함께 업데이트하는 것을 권장합니다.",
        "testing_steps": [
          "패키지 빌드 프로세스 테스트 (python setup.py build)",
          "의존성 설치 확인 (pip install -e .)",
          "외부 패키지 인덱스 접근 테스트",
          "CI/CD 파이프라인에서 빌드 성공 확인",
          "배포 패키지 생성 및 검증 (wheel, sdist)",
          "모든 개발 도구 및 스크립트 동작 확인"
        ]
      },
      "real_world_cases": [
        {
          "title": "PyPI 공급망 공격과 setuptools 취약점",
          "description": "2024년 여러 공급망 공격에서 setuptools의 취약점이 악용되었습니다. 공격자들이 악의적인 패키지를 PyPI에 업로드하고 setuptools의 다운로드 기능을 통해 추가 악성 코드를 실행했습니다.",
          "source_url": "https://nvd.nist.gov/vuln/detail/CVE-2024-6345",
          "date": "2024-07"
        },
        {
          "title": "setuptools ReDoS 공격 사례",
          "description": "CVE-2022-40897을 이용한 ReDoS 공격이 자동화된 빌드 시스템을 표적으로 발견되었습니다. CI/CD 파이프라인이 멈추고 빌드가 실패하는 사례가 보고되었습니다.",
          "source_url": "https://github.com/pypa/setuptools/security/advisories/GHSA-r9hx-vwmv-q579",
          "date": "2022-12"
        }
      ],
      "overall_recommendation": "높은 우선순위로 패치 필요. Docker 환경에서 외부로 노출된 API가 취약한 package_index 함수를 사용하고 있으며, 3개의 HIGH 심각도 취약점이 누적되어 있습니다. 특히 CVE-2024-6345(CVSS 8.8)와 CVE-2025-47273(CVSS 8.8)은 원격 코드 실행과 임의 파일 쓰기를 허용하여 매우 위험합니다. 공급망 공격의 진입점이 될 수 있으므로 1주일 내 패치를 권장합니다."
    },
    {
      "package_name": "Flask",
      "current_version": "2.0.2",
      "priority_level": "MEDIUM",
      "risk_score": 65,
      "docker_external_exposure": false,
      "vulnerabilities": [
        {
          "cve_id": "CVE-2023-30861",
          "severity": "HIGH",
          "cvss_score": 7.5,
          "epss_score": 0.002,
          "vulnerable_functions": [
            "Not specified"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "특정 조건이 모두 충족될 때, 프록시 서버가 한 클라이언트를 위한 응답 데이터를 캐시하여 다른 클라이언트에게 전송할 수 있습니다. 프록시가 Set-Cookie 헤더도 캐시하는 경우, 한 클라이언트의 세션이 다른 클라이언트에게 노출될 수 있습니다. 이는 주로 잘못 구성된 프록시(nginx, Varnish 등) 뒤에서 Flask 애플리케이션이 실행될 때 발생합니다.",
          "potential_impact": "세션 하이재킹, 사용자 간 데이터 유출, 인증 우회, 개인정보 노출. 프록시 설정과 Flask 응답 캐싱 정책이 모두 부적절해야 발생하므로 조건부 취약점입니다."
        }
      ],
      "patching": {
        "target_version": "2.3.2",
        "upgrade_command": "pip install 'Flask>=2.3.2'",
        "breaking_changes": [
          "일부 deprecated 함수 제거",
          "Werkzeug 2.3+ 의존성 필요",
          "세션 쿠키 처리 방식 개선"
        ],
        "compatibility_notes": "Flask 2.3.2는 Werkzeug 2.3+가 필요하므로 Werkzeug도 함께 업그레이드해야 합니다. 대부분의 Flask 확장 프로그램과 호환되지만, 오래된 확장은 업데이트가 필요할 수 있습니다. Flask-Login, Flask-SQLAlchemy 등 주요 확장의 최신 버전 사용을 권장합니다.",
        "testing_steps": [
          "모든 라우트 및 엔드포인트 기능 테스트",
          "세션 및 쿠키 동작 확인",
          "프록시 뒤에서 캐싱 헤더 검증",
          "Flask 확장 프로그램 호환성 확인",
          "인증 및 권한 부여 플로우 테스트",
          "정적 파일 서빙 확인"
        ]
      },
      "real_world_cases": [
        {
          "title": "프록시 캐싱으로 인한 세션 공유 사고",
          "description": "잘못 구성된 Varnish 캐시 뒤의 Flask 애플리케이션에서 사용자 세션이 다른 사용자에게 노출되는 사고가 발생했습니다. Cache-Control 헤더가 적절히 설정되지 않아 민감한 데이터가 캐시되었습니다.",
          "source_url": "https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq",
          "date": "2023-05"
        }
      ],
      "overall_recommendation": "중간 우선순위로 패치 권장. 취약한 함수가 코드에서 직접 사용되지 않으며 Docker 외부 노출도 없습니다. 그러나 CVSS 7.5의 높은 심각도이며, 프록시 환경에서 세션 하이재킹 위험이 있습니다. Werkzeug 패치와 함께 진행하면 효율적입니다. 프록시를 사용하는 프로덕션 환경이라면 우선순위를 높여 2주 내 패치를 권장합니다."
    },
    {
      "package_name": "pip",
      "current_version": "23.0.1",
      "priority_level": "LOW",
      "risk_score": 35,
      "docker_external_exposure": false,
      "vulnerabilities": [
        {
          "cve_id": "CVE-2023-5752",
          "severity": "MEDIUM",
          "cvss_score": 3.3,
          "epss_score": 0.0,
          "vulnerable_functions": [
            "Not specified"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "Mercurial VCS URL에서 패키지를 설치할 때(pip install hg+...), 지정된 Mercurial 리비전을 통해 'hg clone' 명령에 임의의 설정 옵션(--config)을 주입할 수 있습니다. Mercurial 설정을 제어하여 훅을 통한 코드 실행이나 다른 악의적인 동작을 수행할 수 있습니다.",
          "potential_impact": "Mercurial 저장소에서 패키지를 설치하는 경우에만 영향을 받습니다. 대부분의 환경에서는 PyPI를 사용하므로 실제 영향은 제한적입니다. 공격자가 제어하는 Mercurial 저장소를 사용하도록 유도해야 하므로 공격 난이도가 높습니다."
        },
        {
          "cve_id": "CVE-2025-8869",
          "severity": "MEDIUM",
          "cvss_score": 5.3,
          "epss_score": 0.001,
          "vulnerable_functions": [
            "Not specified"
          ],
          "functions_used_in_code": false,
          "external_api_exposed": false,
          "exploit_scenario": "tar 아카이브를 추출할 때 tarfile 모듈이 PEP 706을 구현하지 않은 경우, pip가 심볼릭 링크가 추출 디렉토리 내부를 가리키는지 확인하지 않을 수 있습니다. 악의적인 tar 아카이브를 통해 추출 디렉토리 외부의 파일을 덮어쓸 수 있습니다.",
          "potential_impact": "임의 파일 쓰기, 시스템 파일 손상. Python 버전에 따라 영향이 다르며, 최신 Python 버전에서는 PEP 706이 구현되어 있어 영향을 받지 않습니다. 신뢰할 수 없는 소스에서 패키지를 설치하는 경우에만 위험합니다."
        }
      ],
      "patching": {
        "target_version": "23.3",
        "upgrade_command": "pip install --upgrade 'pip>=23.3'",
        "breaking_changes": [
          "일부 deprecated 옵션 제거",
          "의존성 해결 알고리즘 개선"
        ],
        "compatibility_notes": "pip 업그레이드는 일반적으로 안전하며 하위 호환성이 유지됩니다. Python 3.7+ 환경에서 작동합니다. 업그레이드 후 기존 패키지에는 영향이 없으며, 새로운 보안 기능이 추가됩니다.",
        "testing_steps": [
          "pip 버전 확인 (pip --version)",
          "기존 패키지 목록 확인 (pip list)",
          "테스트 패키지 설치 및 제거",
          "requirements.txt에서 의존성 설치 테스트",
          "가상 환경에서 동작 확인"
        ]
      },
      "real_world_cases": [
        {
          "title": "Mercurial VCS 설정 주입 취약점",
          "description": "CVE-2023-5752는 매우 특수한 상황(Mercurial VCS URL 사용)에서만 발생하므로 실제 악용 사례는 거의 보고되지 않았습니다. EPSS 0.0%는 실제 악용이 관찰되지 않았음을 나타냅니다.",
          "source_url": "https://nvd.nist.gov/vuln/detail/CVE-2023-5752",
          "date": "2023-10"
        },
        {
          "title": "tar 아카이브 심볼릭 링크 취약점",
          "description": "CVE-2025-8869는 최신 취약점이지만 Python 버전과 tarfile 구현에 따라 영향이 다릅니다. 대부분의 최신 환경에서는 PEP 706이 구현되어 있어 영향을 받지 않습니다.",
          "source_url": "https://nvd.nist.gov/vuln/detail/CVE-2025-8869",
          "date": "2025-01"
        }
      ],
      "overall_recommendation": "낮은 우선순위. 취약한 함수가 코드에서 사용되지 않으며 Docker 외부 노출도 없습니다. 두 취약점 모두 매우 특수한 조건에서만 발생하며(Mercurial VCS 사용, 신뢰할 수 없는 tar 아카이브), EPSS 점수도 매우 낮아 실제 악용 가능성이 거의 없습니다. 다른 패키지를 업데이트할 때 함께 업그레이드하거나, 정기 유지보수 시점에 업데이트하면 충분합니다. PyPI만 사용하는 일반적인 환경에서는 긴급성이 낮습니다."
    }
  ],
  "summary": {
    "total_modules": 5,
    "critical_modules": 2,
    "high_priority_modules": 1,
    "medium_priority_modules": 1,
    "low_priority_modules": 1,
    "total_vulnerabilities": 13,
    "external_exposed_modules": 3
  },
  "patching_roadmap": {
    "immediate": [
      "PyYAML (5.3.1 → 5.4) - CRITICAL: Docker 외부 노출 + RCE 취약점 + 실제 사용 중",
      "Werkzeug (2.0.2 → 3.0.6) - CRITICAL: Docker 외부 노출 + 6개 취약점 + 실제 사용 중"
    ],
    "this_week": [
      "setuptools (58.1.0 → 78.1.1) - HIGH: Docker 외부 노출 + 3개 HIGH 취약점 + 공급망 위험"
    ],
    "this_month": [
      "Flask (2.0.2 → 2.3.2) - MEDIUM: 프록시 환경 세션 하이재킹 위험"
    ],
    "when_convenient": [
      "pip (23.0.1 → 23.3) - LOW: 특수 조건에서만 발생, 실제 악용 가능성 낮음"
    ]
  },
  "overall_assessment": "전체 보안 상태: 긴급 조치 필요. 5개 모듈 중 3개가 Docker 환경에서 외부로 노출되어 있으며, 특히 PyYAML과 Werkzeug는 즉시 패치가 필요한 치명적 상태입니다. PyYAML의 CVE-2020-14343(CVSS 9.8)은 원격 코드 실행을 허용하며 실제로 load() 함수가 외부 API에서 사용되고 있어 공격에 완전히 노출되어 있습니다. Werkzeug는 6개의 취약점이 누적되어 있으며 CVE-2024-34069(EPSS 40.3%)는 실제 악용이 매우 활발합니다. setuptools도 3개의 HIGH 심각도 취약점으로 공급망 공격의 진입점이 될 수 있습니다.\n\n권장 행동 계획:\n1. 즉시(24시간 내): PyYAML과 Werkzeug 긴급 패치 적용. 모든 yaml.load()를 yaml.safe_load()로 교체\n2. 1주일 내: setuptools 업그레이드 및 빌드 프로세스 검증\n3. 2주일 내: Flask 업그레이드 및 프록시 캐싱 설정 검토\n4. 1개월 내: pip 업그레이드 및 전체 의존성 최신화\n5. 지속적: 보안 스캐닝 자동화, 의존성 모니터링 도구 도입, 정기적인 보안 업데이트 정책 수립\n\n특히 PyYAML의 경우 외부 입력을 처리하는 모든 코드를 즉시 검토하고 safe_load()로 전환해야 합니다. 프로덕션 환경이라면 긴급 배포를 고려해야 할 수준입니다.",
  "metadata": {
    "total_vulnerabilities": 13,
    "scan_date": "2025-10-10T16:47:09.451689875Z",
    "target": "/home/s3zer0/system-security/test_target/pyyaml-vuln.tar",
    "perplexity_enabled": true,
    "real_world_cases_found": 0
  }
}