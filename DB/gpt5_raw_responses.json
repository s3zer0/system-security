[
    {
        "library": "PyYAML",
        "version": "5.3.1",
        "response": "{\n  \"CVE-2020-14343\": {\n    \"vulnerable_apis\": [\n      \"yaml.full_load\"\n    ],\n    \"reason\": \"The `yaml.full_load` method is vulnerable to arbitrary code execution when processing untrusted YAML files, due to the use of the `python/object/new` constructor, which was an incomplete fix from a previous CVE (CVE-2020-1747).\"\n  }\n}"
    },
    {
        "library": "setuptools",
        "version": "58.1.0",
        "response": "{\n    \"CVE-2022-40897\": {\n        \"vulnerable_apis\": [\n            \"setuptools.package_index.distros_for_url\",\n            \"setuptools.package_index.interpret_distro_name\",\n            \"setuptools.package_index.parse_bdist_wininst\"\n        ],\n        \"reason\": \"These API endpoints implement functionalities that parse and handle external package data, which can include custom HTML content leading to ReDoS.\"\n    },\n    \"CVE-2024-6345\": {\n        \"vulnerable_apis\": [\n            \"setuptools.package_index.distros_for_url\",\n            \"setuptools.package_index.interpret_distro_name\"\n        ],\n        \"reason\": \"These functions are involved in fetching and processing packages from external URLs, which can be exploited to inject and execute arbitrary code.\"\n    },\n    \"CVE-2025-47273\": {\n        \"vulnerable_apis\": [\n            \"setuptools.package_index.distros_for_url\",\n            \"setuptools.package_index.interpret_distro_name\",\n            \"setuptools.package_index.parse_bdist_wininst\"\n        ],\n        \"reason\": \"The mentioned functions interact with external inputs related to package indexing and handling, allowing for potential path traversal attacks when improperly handling package data and URLs.\"\n    }\n}"
    },
    {
        "library": "Werkzeug",
        "version": "2.0.2",
        "response": "{\n  \"CVE-2023-25577\": {\n    \"vulnerable_apis\": [\n      \"werkzeug.wrappers.request.get_data\",\n      \"werkzeug.wrappers.request.data\"\n    ],\n    \"reason\": \"These APIs related to handling multipart form data can lead to high resource usage and potential denial of service due to unlimited parsing of multipart parts.\"\n  },\n  \"CVE-2024-34069\": {\n    \"vulnerable_apis\": [\n      \"werkzeug.debug.get_current_traceback\",\n      \"werkzeug.debug.repr.debug_repr\"\n    ],\n    \"reason\": \"Debugger related APIs can be exploited to execute arbitrary code if developer interacts with controlled domain and enters debugger PIN.\"\n  },\n  \"CVE-2023-46136\": {\n    \"vulnerable_apis\": [\n      \"werkzeug.formparser.parse_form_data\",\n      \"werkzeug.sansio.response.parse_content_range_header\"\n    ],\n    \"reason\": \"These APIs in parsing multipart form data can allow crafted input to cause denial of service by inefficient handling of files starting with CR or LF.\"\n  },\n  \"CVE-2024-49766\": {\n    \"vulnerable_apis\": [\n      \"werkzeug.utils.safe_join\"\n    ],\n    \"reason\": \"This API does not safely handle UNC paths on Windows under Python < 3.11, allowing unintended file system access.\"\n  },\n  \"CVE-2024-49767\": {\n    \"vulnerable_apis\": [\n      \"werkzeug.formparser.MultiPartParser\",\n      \"werkzeug.formparser.parse_form_data\"\n    ],\n    \"reason\": \"These APIs do not limit the memory usage when handling multipart/form-data, enabling memory exhaustion under malicious input.\"\n  },\n  \"CVE-2023-23934\": {\n    \"vulnerable_apis\": [\n      \"werkzeug.http.parse_cookie\"\n    ],\n    \"reason\": \"This API does not correctly handle malformed cookies, potentially allowing cookie spoofing in adjacent applications.\"\n  }\n}"
    }
]