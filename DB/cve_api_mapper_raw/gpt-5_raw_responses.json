[
    {
        "library": "setuptools",
        "version": "58.1.0",
        "response": "{\n  \"CVE-2022-40897\": {\n    \"apis\": [],\n    \"reason\": \"The description cites 'package_index.py' and 'HTML in a crafted package or custom PackageIndex page' causing a 'Regular Expression Denial of Service (ReDoS)'; none of the listed APIs are part of package_index or handle HTML/regex parsing.\"\n  },\n  \"CVE-2024-6345\": {\n    \"apis\": [],\n    \"reason\": \"This issue is in the 'package_index module' and its 'download functions' that can lead to 'remote code execution'; the provided APIs are distutils shim helpers, not package_index download functions.\"\n  },\n  \"CVE-2025-47273\": {\n    \"apis\": [],\n    \"reason\": \"The vulnerability is a 'path traversal' in 'PackageIndex' allowing writes 'to arbitrary locations on the filesystem'; none of the given APIs belong to PackageIndex or perform file download/write operations.\"\n  }\n}"
    },
    {
        "library": "PyYAML",
        "version": "5.3.1",
        "response": "{\n  \"CVE-2020-14343\": {\n    \"apis\": [\n      \"full_load\",\n      \"full_load_all\",\n      \"load\",\n      \"load_all\"\n    ],\n    \"reason\": \"The phrase 'arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader' directly names full_load and implies any API that uses FullLoader. full_load_all is the multi-document variant that also uses FullLoader, and load/load_all are vulnerable when called 'with the FullLoader loader'. Because the flaw allows abuse of 'python/object/new', these deserialization APIs can construct attacker-controlled objects leading to code execution.\"\n  }\n}"
    },
    {
        "library": "Werkzeug",
        "version": "2.0.2",
        "response": "{\n  \"CVE-2023-25577\": {\n    \"apis\": [\n      \"formparser.parse_form_data\",\n      \"formparser.get_input_stream\",\n      \"formparser.default_stream_factory\"\n    ],\n    \"reason\": \"The phrase \\\"multipart form data parser will parse an unlimited number of parts, including file parts\\\" maps directly to formparser.parse_form_data as the entry point for parsing multipart/form-data. The mention that accessing \\\"request.data\\\", \\\"request.form\\\", or \\\"request.files\\\" triggers parsing implies use of formparser.get_input_stream to read the body. \\\"Unlimited file parts can use up memory and file handles\\\" ties to formparser.default_stream_factory, which creates in-memory or temporary file objects for each part.\"\n  },\n  \"CVE-2024-34069\": {\n    \"apis\": [\n      \"debug.get_pin_and_cookie_name\",\n      \"debug.hash_pin\",\n      \"debug.get_machine_id\"\n    ],\n    \"reason\": \"The description notes the attacker must \\\"enter the debugger PIN\\\" and can get \\\"access to the debugger even if it is only running on localhost.\\\" These are directly related to the debugger's PIN generation and verification, handled by debug.get_pin_and_cookie_name and debug.hash_pin, with debug.get_machine_id being part of the PIN derivation.\"\n  },\n  \"CVE-2023-46136\": {\n    \"apis\": [\n      \"formparser.parse_form_data\",\n      \"formparser.get_input_stream\"\n    ],\n    \"reason\": \"The vulnerability occurs when parsing a multipart upload where a file \\\"starts with CR or LF\\\" and boundary \\\"lookup... is performed on [a] growing buffer,\\\" which is the multipart parsing logic implemented by formparser.parse_form_data reading from the request body via formparser.get_input_stream.\"\n  },\n  \"CVE-2024-49766\": {\n    \"apis\": [\n      \"security.safe_join\",\n      \"utils.safe_join\",\n      \"middleware.shared_data.safe_join\"\n    ],\n    \"reason\": \"The CVE explicitly states \\\"Werkzeug's safe_join() relies on [os.path.isabs()] and so can produce a path that is not safe\\\" on Windows with UNC paths like \\\"//server/share.\\\" These safe_join implementations (security.safe_join, utils.safe_join, middleware.shared_data.safe_join) are directly responsible for the affected path-joining behavior.\"\n  },\n  \"CVE-2024-49767\": {\n    \"apis\": [\n      \"formparser.parse_form_data\",\n      \"formparser.default_stream_factory\"\n    ],\n    \"reason\": \"It states that applications using \\\"werkzeug.formparser.MultiPartParser... to parse multipart/form-data\\\" can cause the parser to \\\"allocate and block 3 to 8 times the upload size in main memory.\\\" This corresponds to formparser.parse_form_data invoking the multipart parser, while formparser.default_stream_factory influences how uploaded parts are buffered in memory vs. files.\"\n  },\n  \"CVE-2023-23934\": {\n    \"apis\": [\n      \"http.parse_cookie\",\n      \"sansio.request.parse_cookie\"\n    ],\n    \"reason\": \"The issue is that Werkzeug would \\\"parse the cookie `=__Host-test=bad` as `__Host-test=bad`\\\" when encountering \\\"nameless\\\" cookies like \\\"=value\\\". This is handled by the cookie parsing routines http.parse_cookie and sansio.request.parse_cookie.\"\n  }\n}"
    }
]