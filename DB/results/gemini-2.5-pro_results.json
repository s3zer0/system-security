{
    "PyYAML": {
        "5.3.1": {
            "cves": [
                "CVE-2020-14343"
            ],
            "mapping_result": {
                "CVE-2020-14343": {
                    "apis": [
                        "full_load",
                        "full_load_all",
                        "load",
                        "load_all",
                        "unsafe_load",
                        "unsafe_load_all"
                    ],
                    "reason": "The CVE description explicitly states that the vulnerability occurs when processing untrusted YAML files 'through the full_load method or with the FullLoader loader'. The `full_load` and `full_load_all` functions use the vulnerable `FullLoader`. In the affected library version, the `load` and `load_all` functions also default to using the `FullLoader`, making them vulnerable. The `unsafe_load` and `unsafe_load_all` functions are inherently designed to execute arbitrary code via YAML deserialization, which aligns with the described attack of abusing 'the python/object/new constructor' for arbitrary code execution."
                }
            }
        }
    },
    "setuptools": {
        "58.1.0": {
            "cves": [
                "CVE-2022-40897",
                "CVE-2024-6345",
                "CVE-2025-47273"
            ],
            "mapping_result": {
                "CVE-2022-40897": {
                    "apis": [
                        "package_index.distros_for_url",
                        "package_index.interpret_distro_name",
                        "package_index.parse_bdist_wininst"
                    ],
                    "reason": "The CVE describes a Regular Expression Denial of Service (ReDoS) in 'package_index.py' when processing 'HTML in a crafted package or custom PackageIndex page'. The listed APIs are part of the package_index module and are responsible for processing information from package index URLs, making them directly related to the vulnerable HTML parsing logic."
                },
                "CVE-2024-6345": {
                    "apis": [
                        "package_index.distros_for_url"
                    ],
                    "reason": "The CVE states that a vulnerability in the 'package_index module' allows for remote code execution via its 'download functions' which are 'susceptible to code injection' from 'user-controlled inputs, such as package URLs'. The `package_index.distros_for_url` function directly processes package index URLs to find distributions, matching the description of the vulnerable functionality."
                },
                "CVE-2025-47273": {
                    "apis": [
                        "archive_util.unpack_archive",
                        "archive_util.unpack_directory",
                        "archive_util.unpack_tarfile",
                        "archive_util.unpack_zipfile",
                        "command.install_egg_info.unpack_archive",
                        "wheel.unpack"
                    ],
                    "reason": "The CVE describes a 'path traversal vulnerability in `PackageIndex`' that allows an attacker to 'write files to arbitrary locations on the filesystem'. This type of vulnerability occurs during the extraction of package archives, a process orchestrated by the PackageIndex class. The listed `unpack_*` functions are responsible for extracting various archive formats and writing their contents to the filesystem, which is the direct mechanism exploited by this path traversal vulnerability."
                }
            }
        }
    },
    "Werkzeug": {
        "2.0.2": {
            "cves": [
                "CVE-2023-25577",
                "CVE-2024-34069",
                "CVE-2023-46136",
                "CVE-2024-49766",
                "CVE-2024-49767",
                "CVE-2023-23934"
            ],
            "mapping_result": {
                "CVE-2023-25577": {
                    "apis": [
                        "formparser.parse_form_data",
                        "formparser.parse_multipart_headers"
                    ],
                    "reason": "The CVE describes a denial of service in \"Werkzeug's multipart form data parser\" which can \"parse an unlimited number of parts\". The `formparser.parse_form_data` function is the primary API for parsing form data, including multipart data. The `formparser.parse_multipart_headers` function is a key component of this process, responsible for parsing the headers of each individual part, contributing to the resource usage from an unlimited number of parts."
                },
                "CVE-2024-34069": {
                    "apis": [
                        "debug.get_pin_and_cookie_name",
                        "debug.hash_pin",
                        "debug.render_console_html",
                        "debug.console.dump"
                    ],
                    "reason": "The CVE states that \"The debugger in affected versions of Werkzeug can allow an attacker to execute code\" and specifically mentions the \"debugger PIN\". The `debug.get_pin_and_cookie_name` and `debug.hash_pin` functions are directly responsible for managing this PIN. The `debug.render_console_html` and `debug.console.dump` functions are part of the interactive debugger console, which is the environment where the attacker could \"execute code on a developer's machine\"."
                },
                "CVE-2023-46136": {
                    "apis": [
                        "formparser.parse_form_data"
                    ],
                    "reason": "The CVE describes a denial of service caused by an \"upload of a file that starts with CR or LF\" where the \"lookup for boundary is performed on growing buffer\". This process is a core part of parsing multipart form data, which is handled by the `formparser.parse_form_data` function. The vulnerability lies in how this function inefficiently processes the incoming stream to find boundaries between parts."
                },
                "CVE-2024-49766": {
                    "apis": [
                        "security.safe_join",
                        "utils.safe_join",
                        "middleware.shared_data.safe_join"
                    ],
                    "reason": "The CVE explicitly states that \"Werkzeug's safe_join() relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data.\" The listed APIs (`security.safe_join`, `utils.safe_join`, `middleware.shared_data.safe_join`) are all implementations or re-exports of this vulnerable function within the library."
                },
                "CVE-2024-49767": {
                    "apis": [
                        "formparser.parse_form_data"
                    ],
                    "reason": "The CVE states that applications using `werkzeug.formparser.MultiPartParser` are vulnerable to a \"resource exhaustion (denial of service) attack\" from a \"specifically crafted form submission request\". The `formparser.parse_form_data` function is the primary API that utilizes this vulnerable parser to handle `multipart/form-data` requests, making it the entry point for the attack."
                },
                "CVE-2023-23934": {
                    "apis": [
                        "http.parse_cookie",
                        "debug.parse_cookie",
                        "sansio.request.parse_cookie"
                    ],
                    "reason": "The CVE describes how \"Werkzeug prior to 2.2.3 will parse the cookie `=__Host-test=bad` as __Host-test=bad`\". This incorrect parsing of \"nameless\" cookies happens within the functions responsible for processing the `Cookie` header. The APIs `http.parse_cookie`, `debug.parse_cookie`, and `sansio.request.parse_cookie` are the functions designed for this purpose and contain the vulnerable parsing logic."
                }
            }
        }
    }
}